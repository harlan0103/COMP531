{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/auth.component.css","webpack:///./src/app/auth/auth.component.html","webpack:///./src/app/auth/auth.component.ts","webpack:///./src/app/auth/login/login.component.css","webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/login/login.service.ts","webpack:///./src/app/auth/registration/registration.component.css","webpack:///./src/app/auth/registration/registration.component.html","webpack:///./src/app/auth/registration/registration.component.ts","webpack:///./src/app/main/following/following.component.css","webpack:///./src/app/main/following/following.component.html","webpack:///./src/app/main/following/following.component.ts","webpack:///./src/app/main/following/following.service.ts","webpack:///./src/app/main/headline/headline.component.css","webpack:///./src/app/main/headline/headline.component.html","webpack:///./src/app/main/headline/headline.component.ts","webpack:///./src/app/main/headline/headline.service.ts","webpack:///./src/app/main/main.component.css","webpack:///./src/app/main/main.component.html","webpack:///./src/app/main/main.component.ts","webpack:///./src/app/main/main.service.ts","webpack:///./src/app/main/posts/posts.component.css","webpack:///./src/app/main/posts/posts.component.html","webpack:///./src/app/main/posts/posts.component.ts","webpack:///./src/app/main/posts/posts.service.ts","webpack:///./src/app/profile/profile.component.css","webpack:///./src/app/profile/profile.component.html","webpack:///./src/app/profile/profile.component.ts","webpack:///./src/app/profile/profile.service.ts","webpack:///./src/app/user_login.ts","webpack:///./src/app/user_password_confirm.directive.ts","webpack:///./src/app/user_registration.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".app_headline {\\r\\n    width: 100%;\\r\\n    height: 5%;\\r\\n    /*Rice blue: #0B51B0*/\\r\\n    background-color: #0B51B0;\\r\\n    overflow: hidden;\\r\\n    position: fixed;\\r\\n}\\r\\n\"","module.exports = \"<!--Add auth to the main page-->\\n\\n<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ricebook';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { userPasswordConfirm } from './user_password_confirm.directive';\n//Add formsmodule\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { MainComponent } from './main/main.component';\nimport { AuthComponent } from './auth/auth.component';\nimport { LoginComponent } from './auth/login/login.component';\nimport { RegistrationComponent } from './auth/registration/registration.component';\nimport { FollowingComponent } from './main/following/following.component';\nimport { HeadlineComponent } from './main/headline/headline.component';\nimport { PostsComponent } from './main/posts/posts.component';\n// Register for FollowingService\nimport { HttpClientModule } from '@angular/common/http';\n// Service providers\nimport { FollowingService } from './main/following/following.service';\nimport { HeadlineService } from './main/headline/headline.service';\nimport { PostsService } from './main/posts/posts.service';\nimport { ProfileComponent } from './profile/profile.component';\nimport { Routes, RouterModule, Router} from '@angular/router';\nimport { LoginService } from './auth/login/login.service';\nimport { ProfileService } from './profile/profile.service';\n\n/*Create route*/\nexport const route: Routes = [\n  {path: '', component: AuthComponent},\n  {path: 'auth', component: AuthComponent},\n  {path: 'main', component: MainComponent},\n  {path: 'profile', component: ProfileComponent}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainComponent,\n    AuthComponent,\n    LoginComponent,\n    RegistrationComponent,\n    userPasswordConfirm,\n    FollowingComponent,\n    HeadlineComponent,\n    PostsComponent,\n    ProfileComponent\n  ],\n  imports: [\n    BrowserModule,\n    // Imports formsmodule\n    FormsModule,\n    // Import HttpClientModule\n    HttpClientModule,\n    // Router\n    RouterModule.forRoot(route)\n  ],\n  exports: [\n    RouterModule,\n  ],\n  // import service into app.module\n  providers: [FollowingService, HeadlineService, PostsService, LoginService, ProfileService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".MAINFRAME {\\r\\n    width: 80%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n    overflow: hidden;\\r\\n    background-color: #F7F7F7;\\r\\n    font-family: monospace;\\r\\n}\\r\\n\\r\\n/*==================*/\\r\\n\\r\\n.CONTENTFRAME {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    background-color: #F7F7F7;\\r\\n    margin: auto;\\r\\n    margin-top: 6em;\\r\\n}\\r\\n\\r\\n/*CSS for registration logic*/\\r\\n\\r\\n.CONTENT_REGISTRATION {\\r\\n    width: 50%;\\r\\n    height: 100%;\\r\\n    float: left;\\r\\n    border-right: 1px dashed #D7D7D7;\\r\\n}\\r\\n\\r\\n/*CSS for log-in logic*/\\r\\n\\r\\n.CONTENT_LOGIN {\\r\\n    width: 50%;\\r\\n    height: 100%;\\r\\n    float: left;\\r\\n}\"","module.exports = \"<div class=\\\"MAINFRAME\\\"> \\n    <!--Div for Registration and Login-->\\n    <div class=\\\"CONTENTFRAME\\\">\\n        <div class=\\\"CONTENT_REGISTRATION\\\">\\n            <!--Add registration logic-->\\n            <app-registration></app-registration>\\n        </div>\\n        \\n        <div class=\\\"CONTENT_LOGIN\\\">\\n            <!--Add login component-->\\n            <app-login></app-login>\\n        </div>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  \tselector: 'app-auth',\n  \ttemplateUrl: './auth.component.html',\n  \tstyleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit {\n\n\tconstructor() { }\n\n  \tngOnInit() {\n  \t}\n\n  \ttitle = \"RiceBook\";\n\n}\n","module.exports = \"\\r\\n/*The login form*/\\r\\n#user_login_form {\\r\\n    margin-top: 20%;\\r\\n}\\r\\n/*Field for username input*/\\r\\n#login_username {\\r\\n    width: 50%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n    margin-top: 1%;\\r\\n}\\r\\n#login_username label {\\r\\n    font-size: 160%;\\r\\n}\\r\\n#login_username .text-danger {\\r\\n    font-size: 120%;\\r\\n}\\r\\n#login_password {\\r\\n    width: 50%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n    margin-top: 2%;\\r\\n}\\r\\n#login_password label {\\r\\n    font-size: 160%;\\r\\n}\\r\\n#login_password .text-danger {\\r\\n    font-size: 120%;\\r\\n}\\r\\n#login_btn {\\r\\n    width: 40%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n    margin-top: 5%;\\r\\n    margin-bottom: 5%;\\r\\n}\\r\\n#login_btn button {\\r\\n    width: 100%;\\r\\n    margin: auto;\\r\\n    font-size: 150%;\\r\\n    background-color: #0B51B0;\\r\\n}\\r\\n/*Invalid user name or password alert*/\\r\\n#user_login_invalid {\\r\\n    width: 50%;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n\\r\\n\"","module.exports = \"<div id=\\\"login-form\\\">\\n\\n  <!--ngForm contains the validation for entire form-->\\n  <form #loginForm=\\\"ngForm\\\" id=\\\"user_login_form\\\">\\n\\n    <!--ALERT-->\\n    <!--Alert user if user enter a invalid username or wrong password-->\\n    <div class=\\\"alert alert-danger\\\" role=\\\"alert\\\" id=\\\"user_login_invalid\\\" *ngIf=\\\"showInvalidMsg\\\">\\n      {{errorMessage}}\\n    </div>\\n\\n    <div class=\\\"alert alert-warning\\\" id=\\\"user_login_invalid\\\">\\n      <span>please log in with username</span>\\n    </div>\\n    <!--USERNAME-->\\n    <div class=\\\"form-group\\\" id=\\\"login_username\\\">\\n      <label>USERNAME</label><br/>\\n      <input type=\\\"text\\\" #username=\\\"ngModel\\\"\\n      class=\\\"form-control\\\" [class.is-invalid]=\\\"username.invalid && username.touched || showInvalidMsg\\\"\\n      id=\\\"login-username\\\" name=\\\"login-username\\\" required\\n      [(ngModel)]=\\\"loginModel.username\\\">\\n      <!--Error message for invalid username input-->\\n      <div *ngIf=\\\"username.errors && (username.invalid || username.touched)\\\" [class.d-none]=\\\"username.valid || username.untouched\\\">\\n        <small class=\\\"text-danger\\\" *ngIf=\\\"username.errors.required\\\">Username is required</small>\\n      </div>\\n    </div>\\n\\n    <!--PASSWORD-->\\n    <div class=\\\"form-group\\\" id=\\\"login_password\\\">\\n      <label>PASSWORD</label><br/>\\n      <input type=\\\"password\\\" #pwd=\\\"ngModel\\\"\\n      class=\\\"form-control\\\" [class.is-invalid]=\\\"pwd.invalid && pwd.touched || showInvalidMsg\\\"\\n      id=\\\"login-pwd\\\" name=\\\"login-pwd\\\" required\\n      [(ngModel)]=\\\"loginModel.pwd\\\">\\n      <!--Error message for invalid password input-->\\n      <div *ngIf=\\\"pwd.errors && (pwd.invalid || pwd.touched)\\\" [class.d-none]=\\\"pwd.valid || pwd.untouched\\\">\\n        <small class=\\\"text-danger\\\" *ngIf=\\\"pwd.errors.required\\\">Password is required</small>\\n      </div>\\n    </div>\\n\\n    <!--LOGIN BUTTON-->\\n    <div id=\\\"login_btn\\\">\\n      <button [disabled]=\\\"loginForm.form.invalid\\\" class=\\\"btn btn-primary\\\" (click)=\\\"checkUserValide()\\\">LOG IN</button>\\n    </div>\\n    \\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { UserLogin } from '../../user_login';\nimport { LoginService } from './login.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  public profile = [];\n  public userFollowing = [];\n  public currentUserFollowingList = [];\n  public postsFeed = [];\n  public userPosts = [];\n  public errorMessage:string;\n\n  //new login model\n  loginModel = new UserLogin();\n  // Create two valid param to check if username and password are valid\n  validUser: boolean = false;\n  showInvalidMsg: boolean = false;\n  //validPwd: boolean = false;\n  private userpwd: string;\n  constructor(private _loginService: LoginService, private router:Router) { }\n\n  ngOnInit() {\n    this.initLocalStorage();\n    this.getUserInfo();\n    this.getFollowingInfo();\n    this.getPosts();\n  }\n\n  /**\n   * @initLocalStorage()\n   * Initialize the local storage\n   */\n  initLocalStorage() {\n    localStorage.setItem(\"userFollowing\", \"\");\n    localStorage.setItem(\"userPosts\", \"\");\n    localStorage.setItem(\"currentUser\", \"\");\n    localStorage.setItem(\"status\", \"\");\n  }\n\n  /**\n   * @getUserInfo()\n   * Function to get all user information from service getUser function\n   * Save all user information into profile array\n   */\n  getUserInfo() {\n    this._loginService.getUser().subscribe(data => {\n      this.profile = data;\n    })\n  }\n\n  /**\n   * @getFollowingInfo()\n   * Function to get the following information\n   * Store all following information into the userFollowing\n   */\n  getFollowingInfo() {\n    this._loginService.getFollowing().subscribe(data => {\n      this.userFollowing = data;\n      console.log(this.userFollowing[0]);\n    })    \n  }\n  \n  /**\n   * @getPosts()\n   * Function to get all posts from mock-data\n   */\n  getPosts() {\n    this._loginService.getPosts().subscribe(data => {\n      this.postsFeed = data;\n      console.log(this.postsFeed);\n    })\n  }\n  \n  /**\n   * @findUserFollowing(username)\n   * Function to get current user's following list\n   */\n  findUserFollowing(username) {\n    for(let i = 0; i < this.userFollowing.length; i++){\n      console.log(this.userFollowing[i].username);\n      // For all users in the following find the current user and get its following list\n      if(this.userFollowing[i].username == username){\n        console.log(\"we found the user\");\n        for(let j = 0; j < this.userFollowing[i].following.length; j++){\n          // push users following into the currentUserFolloingList\n          //this.currentUserFollowingList.push(this.userFollowing[i].following[j].netID);\n          this.storeFollowings(this.userFollowing[i].following[j].netID);\n        }\n      }\n    }\n    // Store current user following list to the localstroage\n    localStorage.setItem(\"userFollowing\", JSON.stringify(this.currentUserFollowingList));\n  }\n\n  /**\n   * @storeFollowings()\n   * Store user's following detail information into localstorage\n   */\n  storeFollowings(netID) {\n    for(let i = 0; i < this.userFollowing.length; i++){\n      if(this.userFollowing[i].netID == netID){\n        this.currentUserFollowingList.push(this.userFollowing[i]);\n      }\n    }\n  }\n\n  /**\n   * @findUserPosts(username)\n   * By pass the username\n   * Find all relative posts including user posts and following posts\n   * Store posts into localstorage\n   */\n  findUserPosts(username) {\n    for(let i = 0; i < this.postsFeed.length; i++){\n      if(this.postsFeed[i].author == username){\n        this.userPosts.push(this.postsFeed[i]);\n      }\n    }\n    for(let i = 0; i < this.currentUserFollowingList.length; i++){\n      for(let j = 0; j < this.postsFeed.length; j++){\n        if(this.currentUserFollowingList[i].username == this.postsFeed[j].author){\n          this.userPosts.push(this.postsFeed[j]);\n        }\n      }\n    }\n    localStorage.setItem(\"userPosts\", JSON.stringify(this.userPosts));\n  }\n\n  /**\n  * @checkUserValid()\n  * Check if entered username is registered\n  * Or password is correct\n  */\n  checkUserValide() {\n    this.validUser = false;\n    console.log(this.loginModel.username);\n\n    for(let i = 0; i < this.profile.length; i++){\n      if(this.loginModel.username == this.profile[i].username && this.loginModel.pwd == this.profile[i].password){\n        // If the login username and password are match and correct\n        console.log(\"valid user\");\n        this.validUser = true;\n        this.showInvalidMsg = false;\n        // Set netID and status to the localStorage\n        localStorage.setItem('currentUser', this.profile[i].username);\n        localStorage.setItem('status', this.profile[i].status);\n        this.findUserFollowing(this.loginModel.username);\n        this.findUserPosts(this.loginModel.username);\n        this.router.navigate(['/main']);\n      }\n      \n    }\n    if(this.validUser != true){\n      this.errorMessage = this._loginService.showErrorMessage();\n      console.log(\"invalid user\"); \n      this.showInvalidMsg = true;\n    }\n    // succesful login\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IProfile } from '../../profile';\nimport { IFollowing } from 'src/app/following';\nimport { IPosts } from 'src/app/posts';\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n  // Create the url for user profile json\n  private _url:string = \"../../assets/mock-data/profile.json\";\n  private _followingUrl:string = \"../../assets/mock-data/following.json\";\n  private _postsUrl:string = \"../../assets/mock-data/posts.json\";\n  \n  constructor(private http: HttpClient) { }\n  // Function to return user profile json\n  getUser(): Observable<IProfile[]>{\n    return this.http.get<IProfile[]>(this._url);\n  }\n\n  getFollowing(): Observable<IFollowing[]>{\n    return this.http.get<IFollowing[]>(this._followingUrl);\n  }\n\n  getPosts(): Observable<IPosts[]>{\n    return this.http.get<IPosts[]>(this._postsUrl);\n  }\n\n    /**\n   * loginAction()\n   * @param username \n   * @param pwd \n   * @param profile\n   * Check if user entered username and password are match and valid \n   */\n  loginAction(username: string, pwd: string, profile: IProfile[]) {\n    for(let i = 0; i < profile.length; i++){\n      if(username == profile[i].username && pwd == profile[i].password){\n        return true;\n      }\n      else{\n        return false;\n      }\n    }\n  }\n\n  /**\n   * showSuccessMessage()\n   * When user successLogged in\n   * Return the success message\n   */\n  ShowSuccessMessage(){\n    let message = \"User login successful\";\n    return message;\n  }\n\n  /**\n   * showErrorMessage()\n   * When user entered a invalid username or wrong password\n   * Show this message\n   */\n  showErrorMessage(){\n    let message = \"Invalid username or wrong password!\";\n    return message;\n  }\n\n}\n","module.exports = \"\\r\\n#registration_btn {\\r\\n    height: 100%;\\r\\n    float: left;\\r\\n    margin-bottom: 30%;\\r\\n}\\r\\n\\r\\n#clear_btn {\\r\\n    height: 100%;\\r\\n    float: left;\\r\\n    margin-left: 10%;\\r\\n}\\r\\n\\r\\n/**/\\r\\n\\r\\n.REGISTRATION_TITLE {\\r\\n    width: 50%;\\r\\n    height: 100%;\\r\\n    margin-left: 8%;\\r\\n}\\r\\n\\r\\n.REGISTRATION_TITLE .form-group {\\r\\n    margin-top: 1px;\\r\\n    margin-bottom: 4%;\\r\\n}\\r\\n\\r\\n.REGISTRATION_TITLE label {\\r\\n    margin-bottom: 1%;\\r\\n    font-size: 1.3em;\\r\\n}\\r\\n\\r\\n.REGISTRATION_TITLE small {\\r\\n    font-size: 1em;\\r\\n}\"","module.exports = \"<div class=\\\"REGISTRATION_TITLE\\\">\\n    <form #registForm=\\\"ngForm\\\"> <!--We have the reference of ngForm by assign the variable name #registForm-->\\n        <div class=\\\"alert alert-success\\\" *ngIf=\\\"registStatus\\\">\\n            <span><b>DING!  </b>Welcome {{userModel.name}}</span>\\n        </div>\\n        <!--ACCOUNT NAME-->\\n        <div class=\\\"form-group\\\" id=\\\"regist_account_name\\\">\\n            <!--This is the part for user account name-->\\n            <label>ACCOUNT NAME *</label><br/>\\n            <!--[(ngModel)] is two way binding-->\\n            <input type=\\\"text\\\" #name=\\\"ngModel\\\" \\n                class=\\\"form-control\\\" [class.is-invalid]=\\\"name.invalid && name.touched\\\"\\n                id=\\\"account\\\" name=\\\"account\\\" required \\n                [(ngModel)]=\\\"userModel.name\\\">\\n            <!--\\n                This div contains error message will pop up if name has error when name is invliad or name has been touched\\n                The class will change to \\\"d-none\\\" when name is vliad or name has never been touched\\n            -->\\n            <div *ngIf=\\\"name.errors && (name.invalid || name.touched)\\\" [class.d-none]=\\\"name.valid || name.untouched\\\">\\n                <!--This small tag contains error message will pop up if name is not entered-->\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"name.errors.required\\\">Name is required</small>\\n            </div>\\n        </div>\\n\\n        <!--DISPLAY NAME-->\\n        <div class=\\\"form-group\\\">\\n            <label>DISPLAY NAME</label><br/>\\n            <input type=\\\"text\\\" \\n                class=\\\"form-control\\\" id=\\\"display_name\\\" name=\\\"display\\\" [(ngModel)]=\\\"userModel.display\\\">\\n        </div>\\n        \\n        <!--EMAIL ADDRESS-->\\n        <div class=\\\"form-group\\\">\\n            <label>EMIAL ADDRESS *</label><br/>\\n            <input type=\\\"text\\\" #email=\\\"ngModel\\\"\\n                class=\\\"form-control\\\" [class.is-invalid]=\\\"email.invalid && email.touched\\\"\\n                id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"username@ricebook.com\\\" pattern=\\\"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,3}$\\\" required \\n                [(ngModel)]=\\\"userModel.email\\\">\\n            <!--Error message--> \\n            <div *ngIf=\\\"email.errors && (email.invalid || email.touched)\\\" [class.d-none]=\\\"email.vliad || email.untouched\\\">\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"email.errors.required\\\">Email address is required</small>\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"email.errors.pattern\\\">Please enter a valid email address</small>\\n            </div>\\n        </div>\\n\\n        <!--PHONE NUMBER-->\\n        <div class=\\\"form-group\\\">\\n            <label>PHONE NUMBER *</label><br/>\\n            <input type=\\\"text\\\" #phone=\\\"ngModel\\\"\\n                class=\\\"form-control\\\" [class.is-invalid]=\\\"phone.invalid && phone.touched\\\"\\n                id=\\\"phone\\\" name=\\\"phone\\\" placeholder=\\\"123-123-1233\\\" pattern=\\\"\\\\d{3}[\\\\-]\\\\d{3}[\\\\-]\\\\d{4}\\\" required\\n                [(ngModel)]=\\\"userModel.phone\\\">\\n                <!--The pattenr for phone number is 123-123-1233-->\\n            <!--Error message-->\\n            <div *ngIf=\\\"phone.errors && (phone.invalid || phone.touched)\\\" [class.d-none]=\\\"phone.valid || phone.untouched\\\">\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"phone.errors.required\\\">Phone number is required</small>\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"phone.errors.pattern\\\">Phone number must follow the pattern: 123-123-1233</small>\\n            </div>\\n        </div>\\n\\n        <!--DATE OF BIRTH-->\\n        <div class=\\\"form-group\\\">\\n            <label>DATE OF BIRTH *</label><br/>\\n            <input type=\\\"date\\\" #date=\\\"ngModel\\\"\\n                class=\\\"form-control\\\" id=\\\"birth\\\" name=\\\"birth\\\" required [(ngModel)]=\\\"userModel.birth\\\">\\n        </div>\\n\\n        <!--ZIPCODE-->\\n        <div class=\\\"form-group\\\">\\n            <label>ZIPCODE *</label><br/>\\n            <input type=\\\"text\\\" #zipcode=\\\"ngModel\\\"\\n                class=\\\"form-control\\\" [class.is-invalid]=\\\"zipcode.invalid && zipcode.touched\\\"\\n                id=\\\"zipcode\\\" name=\\\"zipcode\\\" placeholder=\\\"77030\\\" pattern=\\\"\\\\d{5}\\\" required \\n                [(ngModel)]=\\\"userModel.zipcode\\\">\\n                <!--The pattenr of zipcode should be 5 digit numbers-->\\n            <!--Error message for invalid and mispattern-->\\n            <div *ngIf=\\\"zipcode.errors && (zipcode.invalid || zipcode.touched)\\\" [class.d-none]=\\\"zipcode.valid || zipcode.untouched\\\">\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"zipcode.errors.required\\\">Zipcode is required</small>\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"zipcode.errors.pattern\\\">Zipcode must be 5 digit numbers</small>\\n            </div>\\n        </div>\\n\\n        <!--PASSWORD-->\\n        <div class=\\\"form-group\\\">\\n            <label>PASSWORD *</label><br/>\\n            <input type=\\\"password\\\" #pwd=\\\"ngModel\\\"\\n                class=\\\"form-control\\\" [class.is-invalid]=\\\"pwd.invalid && pwd.touched\\\"\\n                id=\\\"pwd\\\" name=\\\"pwd\\\" required \\n                [(ngModel)]=\\\"userModel.pwd\\\">\\n            <!--Error message for password required-->\\n            <div *ngIf=\\\"pwd.errors && (pwd.invliad || pwd.touched)\\\" [class.d-none]=\\\"pwd.valid || pwd.untouched\\\">\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"pwd.errors.required\\\">Password is required</small>\\n            </div>\\n        </div>\\n\\n        <!--\\n            User input confirm password field\\n            Check for password validation\\n            And check password matching with confirm password\\n            Create a new directive named pwdValidator to test password match\\n        -->\\n        <!--CONFIRM PASSWORD-->\\n        <div class=\\\"form-group\\\">\\n            <label>CONFIRM PASSWORD *</label><br/>\\n            <input type=\\\"password\\\" #repwd=\\\"ngModel\\\"\\n                class=\\\"form-control\\\" [class.is-invalid]=\\\"repwd.invalid && repwd.touched\\\" pwdValidator=\\\"pwd\\\"\\n                id=\\\"repwd\\\" name=\\\"repwd\\\" required \\n                [(ngModel)]=\\\"userModel.repwd\\\">\\n            <!--Error message for confirm password required and password mismatch-->\\n            <div >\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"repwd.touched && repwd.errors?.notEqual\\\">Password and confirm Password does not match</small>\\n            </div>\\n        </div>\\n\\n        <div id=\\\"registration_btns\\\">\\n            <!--REGISTRATION BUTTON-->\\n            <div id=\\\"registration_btn\\\">\\n                <button [disabled]=\\\"registForm.form.invalid\\\" class=\\\"btn btn-primary\\\" (click)=\\\"registSuccess()\\\">REGISTER</button>\\n            </div>\\n            <!--CLEAR BUTTON-->\\n            <div id=\\\"clear_btn\\\">\\n                <button class=\\\"btn btn-primary\\\" (click)=\\\"registerClear()\\\">CLEAR</button>\\n            </div>\\n        </div>\\n    </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { UserInfo } from '../../user_registration';\nimport { AbstractControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n  registStatus:boolean = false;\n  // Create a new userModel to recieve user input\n  userModel = new UserInfo();\n\n  registerClear() {\n    this.userModel.name = \"\";\n    this.userModel.display = \"\";\n    this.userModel.email = \"\";\n    this.userModel.phone = \"\";\n    this.userModel.birth = null;\n    this.userModel.zipcode = null;\n    this.userModel.pwd = \"\";\n    this.userModel.repwd = \"\";\n  }\n\n  constructor() { }\n\n  ngOnInit() {\n  \n  }\n\n  registSuccess(){\n    this.registStatus = true;\n  }\n  \n}\n","module.exports = \"/*Followings User Information*/\\r\\n.following_user_info {\\r\\n    width: 95%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n    border-bottom: 1px solid #BABABA;\\r\\n}\\r\\n.following_user_detail {\\r\\n    width: 100%;\\r\\n    padding-top: 1%;\\r\\n    height: 100%;\\r\\n}\\r\\n.following_img_username {\\r\\n    width: 100%;\\r\\n    overflow: hidden;\\r\\n}\\r\\n/*Following img*/\\r\\n.following_img {\\r\\n    width: 20%;\\r\\n    float: left;\\r\\n    border: 1px solid #BABABA;\\r\\n    box-shadow: 1px 1px 10px #0DCE00;\\r\\n}\\r\\n/*Following Username*/\\r\\n.following_username {\\r\\n    width: auto;\\r\\n    height: 50%;\\r\\n    float: left;\\r\\n    padding-left: 5%;\\r\\n    padding-top: 3%;\\r\\n    font-size: 15px;\\r\\n}\\r\\n.unfollow {\\r\\n    width: 15px;\\r\\n    float: right;\\r\\n}\\r\\n.unfollow:hover {\\r\\n    cursor: pointer;\\r\\n}\\r\\n/*Following Status*/\\r\\n.following_status {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    padding-top: 5%;\\r\\n    padding-bottom: 5%;\\r\\n    font-size: 15px;\\r\\n}\\r\\n/*Following Module Add Field*/\\r\\n.following_add_new_user {\\r\\n    width: 90%;\\r\\n    height: 3em;\\r\\n    margin: auto;\\r\\n    margin-top: 1em;\\r\\n}\\r\\n#following_add_field {\\r\\n    width: 60%;\\r\\n    height: 80%;\\r\\n    float: left;\\r\\n}\\r\\n#following_add_field input {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    border: none;\\r\\n    font-size: 1.3em;\\r\\n    text-indent: 0.5em;\\r\\n    border-bottom: 1px solid #BABABA;\\r\\n}\\r\\n#following_add_button {\\r\\n    width: 33%;\\r\\n    float: left;\\r\\n    margin-left: 3%;\\r\\n}\\r\\n#following_add_button button {\\r\\n    width: 100%;\\r\\n}\\r\\n#invalidUser {\\r\\n    width: 90%;\\r\\n    margin: auto;\\r\\n    padding-bottom: 1%;\\r\\n    color: red;\\r\\n}\"","module.exports = \"<div>\\n  <!--Use *ngFor to fetch following data from followings array-->\\n  <div *ngFor=\\\"let following of followingList\\\" class=\\\"following_user_info\\\">\\n\\n    <div class=\\\"following_user_detail\\\">\\n      <div class=\\\"following_img_username\\\">\\n        <img class=\\\"following_img\\\" src={{following.img}}>\\n          \\n        <div class=\\\"following_username\\\">\\n          {{following.username}}\\n        </div>   \\n        <!--When click remove icon, remove the user-->\\n        <img class=\\\"unfollow\\\" src=\\\"../../../assets/img/unfollow.png\\\" (click)=\\\"deleteFollowing(following.username)\\\">\\n\\n      </div>\\n        \\n      <div class=\\\"following_status\\\">\\n        {{following.status}}\\n      </div>\\n\\n    </div>\\n    \\n  </div>\\n\\n  <div class=\\\"following_add_new_user\\\">\\n\\n    <div name=\\\"following_add_field\\\" id=\\\"following_add_field\\\">\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"newFollowing\\\" *ngIf=\\\"newFollowing!=null\\\">\\n    </div>\\n\\n    <div name=\\\"following_add_button\\\" id=\\\"following_add_button\\\">\\n      <button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"addFollowing(newFollowing)\\\">ADD</button>\\n    </div>\\n\\n  </div>\\n  <div id=\\\"invalidUser\\\">\\n    <span *ngIf=\\\"invalidUser\\\">Invalid user</span>\\n  </div>\\n  \\n\\n</div>\"","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { FollowingService } from './following.service';\nimport { IFollowing } from 'src/app/following';\n\n@Component({\n  selector: 'app-following',\n  templateUrl: './following.component.html',\n  styleUrls: ['./following.component.css']\n})\nexport class FollowingComponent implements OnInit {\n  // followingList contains user's following\n  public followingList = [];\n  // contains all following information\n  public followings = [];\n  // posts contains all post feeds\n  private posts = [];\n  // posts contains user's posts and following posts\n  private postList = [];\n  //\n  private deletePostList = [];\n\n  // Params for new following check\n  valid: boolean = false;\n  duplicate: boolean = false;\n  newFollowing: string = \"\";\n  newFollowingObj: IFollowing;\n  invalidUser:boolean = false;\n  // Create a emitter to transfer value to parent component\n  @Output() PostListEvent = new EventEmitter();\n\n  constructor(private _followingService: FollowingService) { }\n\n  ngOnInit() {// Get called when component initialized\n    this.getFollowing();\n    this.getFollowingList();\n    this.getPosts();\n    this.getPostsList();\n  }\n\n  /**\n   * @getFollowing()\n   * Get all following from service\n   * Then store followings\n   */\n  getFollowing() {\n    this._followingService.getFollowing().subscribe(data => {\n      this.followings = data;\n    })\n  }\n\n  /**\n   * @getPosts()\n   * Get all post feeds from service\n   * Then store posts\n   */\n  getPosts() {\n    this._followingService.getPost().subscribe(data => {\n      this.posts = data;\n    })\n  }\n  \n  /**\n   * @getFollowingList()\n   * Get current user following list from localStorage\n   */\n  getFollowingList() {\n    this.followingList = JSON.parse(localStorage.getItem(\"userFollowing\"));\n    console.log(this.followingList);\n  }\n\n  /**\n   * @getPostsList()\n   * Get current user posts and following posts\n   */\n  getPostsList() {\n    this.postList = JSON.parse(localStorage.getItem(\"userPosts\"));\n    console.log(this.postList);\n    //this.PostListEvent.emit(this.postList);\n  }\n\n  /**\n   * @addFollowing(newFollowing)\n   * Get user input newFollowing\n   * Check if new following is valid and not duplicate\n   * If valid and not duplicate\n   * Store into followingList and update the localstorage\n   */\n  addFollowing(newFollowing){\n    // Check for duplicate followings\n    for(let i = 0; i < this.followingList.length; i++){\n      if(this.followingList[i].username == newFollowing){\n        this.duplicate = true;\n      }\n    }\n\n    // Check for valid followings\n    for(let j = 0; j < this.followings.length; j++){\n      //console.log(\"all user: \" + this.followings[j].username);\n      if(this.followings[j].username == newFollowing){\n        this.valid = true;\n        this.newFollowingObj = this.followings[j];\n      }\n    }\n\n    // Valid new following and not duplicate\n    if(this.valid == true && this.duplicate == false){\n      this.followingList.push(this.newFollowingObj);\n      localStorage.setItem(\"userFollowing\", JSON.stringify(this.followingList));\n      this.addPost(newFollowing);\n      this.invalidUser = false;\n    }\n    else{\n      // Print out error message\n      this.invalidUser = true;\n    }\n    \n    // Initialize all params\n    this.valid = false;\n    this.duplicate = false;\n    this.newFollowing = \"\";\n\n    //location.reload();\n  }\n\n  /**\n   * @deleteFollowing(username)\n   * Delete user selected following user from following list\n   * Then update the localStorage\n   */\n  deleteFollowing(username){\n    for(let i = 0; i < this.followingList.length; i++){\n      if(this.followingList[i]['username'] == username){\n        if(i == 0){\n          this.followingList.splice(0, 1);\n          localStorage.setItem(\"userFollowing\", JSON.stringify(this.followingList));\n        }\n        else{\n          /*Delete the i-th content*/\n          this.followingList.splice(i, 1);\n          localStorage.setItem(\"userFollowing\", JSON.stringify(this.followingList));\n        }\n      }\n    }\n\n    // Delete username feed\n    this.deletePost(username);\n    console.log(\"remove: \" + username);\n  }\n\n  /**\n   * @addPost(username)\n   * Check new following's posts\n   * Then add to the postList and update localStorage\n   */\n  addPost(username) {\n    this.getPostsList();\n    /*\n    for(let i = 0; i < this.posts.length; i++){\n      if(this.posts[i].author == username){\n        this.postList.push(this.posts[i]);\n      }\n    }\n    */\n    this.postList = this._followingService.addPost(username, this.postList, this.posts);\n    localStorage.setItem(\"userPosts\", JSON.stringify(this.postList));\n    this.PostListEvent.emit(this.postList);\n  }\n\n  /**\n   * @deletePost(username)\n   * Delete the user selected following\n   * Update new posts list to the localStorage\n   */\n  deletePost(username) {\n    this.getPostsList();\n    this.deletePostList = this._followingService.deletePost(username, this.postList);\n    localStorage.setItem(\"userPosts\", JSON.stringify(this.deletePostList));\n    this.PostListEvent.emit(this.deletePostList);\n    this.deletePostList = [];\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IFollowing } from '../../following';\nimport { IPosts } from '../../posts';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FollowingService {\n  // Create a property point to the json file\n  private _url: string = \"../../assets/mock-data/following.json\";\n  private _postUrl: string = \"../../assets/mock-data/posts.json\";\n  // In order to use HTTP, create a dependence of http in constructor\n  // Then we can use http as instance to refer the HttpClient\n  constructor(private http: HttpClient) { \n  }\n\n  // Create a function to return the following data in the service\n  // STEP1: Define the following class\n  // STEP2: Register FollowingService in app.module\n\n  // Return a observable array\n  getFollowing(): Observable<IFollowing[]>{\n    /* Using hard code variables\n    return [\n      {\"id\":1, \"username\":\"test1\", \"status\":\"something\"},\n      {\"id\":2, \"username\":\"test2\", \"status\":\"something\"},\n      {\"id\":3, \"username\":\"test3\", \"status\":\"something\"},\n      {\"id\":4, \"username\":\"test4\", \"status\":\"something\"},\n    ]\n    */\n\n    // Get data from HTTP calls and request data from url\n    return this.http.get<IFollowing[]>(this._url);\n    // .get return an observable\n    // Create a following interface\n  }\n\n  /**\n   * return post json\n   */\n  getPost(): Observable<IPosts[]>{\n    return this.http.get<IPosts[]>(this._postUrl);\n  }\n\n  /**\n   * Find all posts with currentUser as author\n   */\n  getUserPosts(currentUser:string, PostList:IPosts[]){\n    let post = [];\n    for(let i = 0; i < PostList.length; i++){\n      if(PostList[i].author == currentUser){\n        post.push(PostList[i]);\n      }\n    }\n    return post;\n  }\n\n  addFollowing(username:string, followingList:IFollowing[]){\n\n  }\n\n  /**\n   * deletePost\n   * @param username \n   * @param PostList \n   * If post contains username\n   * Delete it from the current post list\n   */\n  deletePost(username:string, PostList: IPosts[]){\n    // Use a new array to update value\n    let deletePostList = [];\n    for(let i = 0; i < PostList.length; i++){\n      if(PostList[i].author != username){\n        deletePostList.push(PostList[i]);\n      }\n    }\n    return deletePostList;\n  }\n\n  /**\n   * addPost\n   * @param username \n   * @param PostList \n   * If post contains username\n   * Add it to the user following posts\n   */\n  addPost(username:string, PostList: IPosts[], posts: IPosts[]){\n    for(let i = 0; i < posts.length; i++){\n      if(posts[i].author == username){\n        PostList.push(posts[i]);\n      }\n    }\n    return PostList;\n  }\n}\n","module.exports = \".headline_mainframe {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n}\\r\\n\\r\\n.headline_user_new_post {\\r\\n    width: 82%;\\r\\n    height: 95%;\\r\\n    float: left;\\r\\n    padding-top: 2%;\\r\\n    border-bottom-left-radius: 1%;\\r\\n    border-bottom-right-radius: 1%;\\r\\n    background-color: #F7F7F7;\\r\\n}\\r\\n\\r\\n.headline_user_add_new_img {\\r\\n    width: 15%;\\r\\n    height: auto;\\r\\n    float: left;\\r\\n    margin-left: 10%;\\r\\n    margin-top: 1%;\\r\\n}\\r\\n\\r\\n#add_img {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    border: 2px solid #BABABA;\\r\\n}\\r\\n\\r\\n.headline_user_add_new_post {\\r\\n    height: 100%;\\r\\n    width: 70%;\\r\\n    float: left;\\r\\n    margin-left: 3%;\\r\\n}\\r\\n\\r\\n.headline_user_add_new_post textarea {\\r\\n    resize: none;\\r\\n    height: 73%;\\r\\n    width: 90%;\\r\\n    font-size: 1.5em;\\r\\n}\\r\\n\\r\\n.headline_user_add_new_post_btns {\\r\\n    height: 15%;\\r\\n    width: 90%;\\r\\n}\\r\\n\\r\\n.headline_btn_share {\\r\\n    width: 20%;\\r\\n    float: right;\\r\\n}\\r\\n\\r\\n.headline_btn_share button {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.headline_btn_clear {\\r\\n    width: 25%;\\r\\n    padding-right: 5%;\\r\\n    float: right;\\r\\n}\\r\\n\\r\\n.headline_btn_clear button {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n/*Headline User Information(Right Conrner)*/\\r\\n\\r\\n.headline_user_info {\\r\\n    width: 17%;\\r\\n    height: 95%;\\r\\n    float: right;\\r\\n    border-bottom-left-radius: 2%;\\r\\n    border-bottom-right-radius: 2%;\\r\\n    background-color: #F7F7F7;\\r\\n}\\r\\n\\r\\n/*Set user img*/\\r\\n\\r\\n.headline_user_img {\\r\\n    width: 40%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n    border-radius: 50%;\\r\\n    margin-top: 10%;\\r\\n    border: 4px solid #BABABA;\\r\\n}\\r\\n\\r\\n.headline_user_img img {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    border-radius: 50%;\\r\\n}\\r\\n\\r\\n/*User status*/\\r\\n\\r\\n.headline_user_status {\\r\\n    width: 90%;\\r\\n    height: 20%;\\r\\n    margin: auto;\\r\\n    margin-top: 5%;\\r\\n    font-size: 100%;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n/*User status update field*/\\r\\n\\r\\n.headline_user_status_update {\\r\\n    width: 100%;\\r\\n    height: 20%;\\r\\n    margin: auto;\\r\\n    margin-top: 5%;\\r\\n    font-size: 100%;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.headline_user_status_update textarea {\\r\\n    width: 75%;\\r\\n    height: 90%;\\r\\n    margin-left: 2%;\\r\\n    resize: none;\\r\\n    float: left;\\r\\n}\\r\\n\\r\\n.headline_user_status_update button {\\r\\n    width: 20%;\\r\\n    height: 50%;\\r\\n    font-size: 80%;\\r\\n    margin-right: 2%;\\r\\n    margin-top: 7%;\\r\\n    float: right;\\r\\n}\\r\\n\\r\\n.headline_user_status span {\\r\\n    align-content: center;\\r\\n}\\r\\n\\r\\n.headline_user_status span:hover {\\r\\n    cursor: pointer;   /*Change cursor to pointer when hover the mouse*/\\r\\n}\\r\\n\\r\\n/*User follower follows posts*/\\r\\n\\r\\n.headline_user_feed_information {\\r\\n    width: 100%;\\r\\n    height: 20%;\\r\\n    margin-top: 3%;\\r\\n}\\r\\n\\r\\n.headline_user_follower_control {\\r\\n    width: 33%;\\r\\n    height: 100%;\\r\\n    float: left;\\r\\n}\\r\\n\\r\\n#user_follower {\\r\\n    border-left: 1px solid #BABABA;\\r\\n    border-right: 1px solid #BABABA;\\r\\n}\\r\\n\\r\\n/*Numbers*/\\r\\n\\r\\n.headline_user_follower_number {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    font-size: 150%;\\r\\n    font-weight: bold;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n/*Follower following posts data*/\\r\\n\\r\\n.headline_user_follower_title {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    font-size: 110%;\\r\\n    text-align: center;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"headline_mainframe\\\">\\n  <!--Div for user to add new post with picture-->\\n  <div class=\\\"headline_user_new_post\\\">\\n    <!--Field for user to add new img-->\\n    <div class=\\\"headline_user_add_new_img\\\">\\n      <img alt=\\\"temporary img\\\" id=\\\"add_img\\\" src=\\\"../../../assets/img/add.png\\\">\\n      <input type=\\\"file\\\">\\n    </div>\\n\\n    <!--Field for user to write new post-->\\n    <div class=\\\"headline_user_add_new_post\\\">\\n      <!--Use ngModel two way bind to clear out the value-->\\n      <textarea placeholder=\\\"Share your post\\\" [(ngModel)]=\\\"clearValue\\\"></textarea>\\n\\n      <div class=\\\"headline_user_add_new_post_btns\\\">\\n\\n        <div class=\\\"headline_btn_share\\\">\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"addPost()\\\">Share</button>\\n        </div>\\n\\n        <div class=\\\"headline_btn_clear\\\">\\n          <button class=\\\"btn btn-primary\\\" (click)=\\\"clearOnClick()\\\">Clear</button>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"headline_user_info\\\">\\n      <div class=\\\"headline_user_img\\\">\\n        <img src={{currentUser.img}}>\\n      </div>\\n\\n      <div class=\\\"headline_user_status\\\" *ngIf=\\\"showStatus\\\" (click)=\\\"clickUserStatus()\\\">\\n        <!-- In order to change the status, user hard code instead\\n          <span>{{currentUser.status}}</span>\\n        -->\\n        <span>{{userStatus}}</span>\\n      </div>\\n      <!--hide or show update textare based on the status-->\\n      <div class=\\\"headline_user_status_update\\\" *ngIf=\\\"showStatusUpdate\\\">\\n        <!--<textarea>{{currentUser.status}}</textarea>-->\\n          <textarea [(ngModel)]=\\\"userStatus\\\"></textarea>\\n          <button class=\\\"btn btn-primary btn-sm\\\" (click)=\\\"clickUpdateStatus()\\\">Save</button>\\n      </div>\\n\\n      <!--User follow follower posts information-->\\n      <div class=\\\"headline_user_feed_information\\\">\\n\\n        <div class=\\\"headline_user_follower_control\\\" id=\\\"user_follow\\\">\\n\\n          <div class=\\\"headline_user_follower_number\\\">{{currentUser.following}}</div>\\n          <div class=\\\"headline_user_follower_title\\\">Following</div>\\n\\n        </div>\\n\\n        <div class=\\\"headline_user_follower_control\\\" id=\\\"user_follower\\\">\\n\\n          <div class=\\\"headline_user_follower_number\\\">{{currentUser.follower}}</div>\\n          <div class=\\\"headline_user_follower_title\\\">Followers</div>\\n\\n        </div>\\n\\n        <div class=\\\"headline_user_follower_control\\\" id=\\\"user_posts\\\">\\n\\n          <div class=\\\"headline_user_follower_number\\\">{{currentUser.posts}}</div>\\n          <div class=\\\"headline_user_follower_title\\\"><span>Posts</span></div>\\n\\n        </div>\\n\\n      </div>\\n\\n  </div>\\n</div>\\n\"","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { HeadlineService } from '../headline/headline.service';\nimport { IFollowing } from 'src/app/following';\nimport { HttpClient } from '@angular/common/http';\nimport { IPosts } from 'src/app/posts';\n\n@Component({\n  selector: 'app-headline',\n  templateUrl: './headline.component.html',\n  styleUrls: ['./headline.component.css']\n})\nexport class HeadlineComponent implements OnInit {\n  // Create headlineService in constructor\n  constructor(private _headlineService: HeadlineService, private http: HttpClient) { }\n\n\n  public postList = JSON.parse(localStorage.getItem(\"userPosts\"));\n  // Create user array\n  private users = [];\n  public user = [];\n  loginUser: string;\n\n  //@Output() addNewPost = new EventEmitter();\n  @Output() addNewPost = new EventEmitter();\n\n  // A new post\n  public newPost: IPosts = {\n    \"img\": \"\",\n    \"time\": \"Oct 16, 2018\",\n    \"author\": \"\",\n    \"article\": \"\",\n    \"title\": \"dummy title\",\n    \"comment\": \"\"\n  };\n\n  showStatusUpdate: boolean = false;\n  showStatus: boolean = true;\n\n  userStatus: string = localStorage.getItem(\"status\");\n\n  statusUpdate: string;\n  testUser: object = {};\n  currentUser: IFollowing = {\n    netID: \"\",\n    username: \"\",\n    status: \"\",\n    following: \"\",\n    follower: \"\",\n    img: \"\",\n  }\n\n  /*When user click clear button for new post, set textarea value to ' '*/\n  clearValue: string ='';\n  clearOnClick() {\n    console.log(\"clear btn\");\n    this.clearValue ='';\n  }\n\n\n  /**\n   * @addPost()\n   * When user click \"share\" button\n   * Create a new IPost class and add information to that newPost\n   * Then push the new Post to up-to-date postList\n   * Emit new List to the post.component\n   * Then update postList in localStorage\n   */\n  addPost() {\n    this.postList = JSON.parse(localStorage.getItem(\"userPosts\"));\n    console.log(this.clearValue);\n    // Create a new post object\n    // Set the article\n    this.newPost.article = this.clearValue;\n    this.newPost.author = localStorage.getItem(\"currentUser\");\n    this.newPost.time = Date();\n    this.postList.unshift(this.newPost);\n    localStorage.setItem(\"userPosts\", JSON.stringify(this.postList));\n    this.addNewPost.emit(this.postList);\n    this.clearValue = \"\";\n  }\n\n\n\n\n  /*When click userstatus, hide current user status and show the textarea for user to edit*/\n  clickUserStatus(){\n    this.showStatus = false;\n    this.showStatusUpdate = true;\n  }\n\n  /*When click save button, save the update value and display the user status*/\n  clickUpdateStatus(){\n    this.showStatus = true;\n    this.showStatusUpdate = false;\n    localStorage.setItem(\"status\", this.userStatus);\n    /*\n    this._headlineService.updateUser(this.currentUser).subscribe(data => {\n      console.log(\"PUT Request is successful\", this.currentUser);\n    },\n    error => {\n      console.log(\"Error\", error);\n    });\n    \n    this.testUser = {\n      \"id\": 2,\n      \"username\": \"Ecophobia\",\n      \"status\": \"123\", \n      \"img\": \"../../assets/img/user2.png\"\n    }\n\n    this.http.put(\"../../assets/mock-data/following.json\", this.testUser).subscribe();\n    */\n  }\n\n  ngOnInit() {\n    // When page init\n    // Use service object to call getUser method\n    // Then subscribe observable and get data\n    this._headlineService.getUser()\n        .subscribe(data => {\n          console.log(data);\n          this.users = data;\n          this.loginUser = localStorage.getItem(\"currentUser\");\n          for(let i = 0; i < this.users.length; i++){\n            console.log(this.users[i].netID);\n            if(this.users[i].username == this.loginUser){\n              // We find the current user\n              //this.user = this.users[i];\n              this.currentUser.netID = this.loginUser;\n              this.currentUser.status = this.users[i].status;\n              // Set user status to the local storage and get the status\n              this.currentUser.following = this.users[i].following.length;\n              console.log(this.currentUser.following)\n              this.currentUser.follower = this.users[i].follower.length;\n              this.currentUser.img = this.users[i].img;\n              console.log(this.currentUser.img);\n            }\n          }\n        });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IUser } from '../../user';\nimport { Observable } from 'rxjs';\nimport { IFollowing } from 'src/app/following';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeadlineService {\n  // Create the url for user.json\n  // following.json 改名 userInfo.json\n  private _url: string = \"../../assets/mock-data/following.json\";\n\n  // Add private http to the constructor\n  constructor(private http: HttpClient) { }\n\n  // Return user information function\n  // getUser() method return Observable<IUser[]>\n  getUser(): Observable<IFollowing[]>{\n    return this.http.get<IFollowing[]>(this._url);\n  }\n\n  /**\n   * Update the user status **test function\n  */\n  updateUser(userInfo: IFollowing): Observable<IFollowing>{\n    return this.http.put<IFollowing>(this._url, userInfo);\n  }\n\n\n}\n","module.exports = \".main_mainframe {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n}\\r\\n\\r\\n/*Main Page Headline Module*/\\r\\n\\r\\n.main_headline {\\r\\n    width: 80%;\\r\\n    font-family: monospace;\\r\\n    height: 35%;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n.postpart {\\r\\n    width: 80%;\\r\\n    height: auto;\\r\\n    font-family: monospace;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n/*Main Page Following Module*/\\r\\n\\r\\n.main_following_module {\\r\\n    font-family: monospace;\\r\\n    width: 17%;\\r\\n    height: 100%;\\r\\n    height: auto;\\r\\n    float: right;\\r\\n    background-color: #E7E7E7;\\r\\n    border-top-left-radius: 2%;\\r\\n    border-top-right-radius: 2%;\\r\\n}\\r\\n\\r\\n/*Main Page Posts Module*/\\r\\n\\r\\n.main_posts_module {\\r\\n    font-family: monospace;\\r\\n    width: 82%;\\r\\n    height: auto;\\r\\n    float: left;\\r\\n}\\r\\n\\r\\n.user_profile:hover {\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n.user_logout:hover {\\r\\n    cursor: pointer;\\r\\n}\"","module.exports = \"<div class=\\\"main_mainframe\\\">\\n\\n  <div class=\\\"app_headline\\\">\\n    <div class=\\\"app_navi\\\">\\n      <div class=\\\"web_name\\\">\\n        <span>RiceBook</span>\\n      </div>\\n    \\n      <div class=\\\"web_logo\\\">\\n        <img src=\\\"./assets/img/logo.png\\\">\\n      </div>\\n    \\n      <div class=\\\"search_bar\\\">\\n        <textarea placeholder=\\\"Search\\\" [(ngModel)]=\\\"search\\\"></textarea>\\n      </div>\\n    \\n      <div class=\\\"search_btn\\\">\\n        <button class=\\\"btn btn-default\\\" (click)=\\\"onSearchClick()\\\" *ngIf=\\\"searchOn\\\">Search</button>\\n        <button class=\\\"btn btn-default\\\" (click)=\\\"onClearSearch()\\\" *ngIf=\\\"searchOff\\\">Clear</button>\\n      </div>\\n    \\n      <div class=\\\"user_profile\\\">\\n        <span routerLink=\\\"/profile\\\">Profile</span>\\n      </div>\\n    \\n      <div class=\\\"user_logout\\\">\\n        <span routerLink=\\\"/\\\" (click)=\\\"Logout()\\\">Logout</span>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"main_headline\\\">\\n    <app-headline (addNewPost)=\\\"postListEvent($event)\\\"></app-headline>\\n  </div>\\n \\n\\n  <div class=\\\"postpart\\\">\\n  <!-- Test div for posts\\n    <div *ngFor=\\\"let post of postList\\\">\\n      <span style=\\\"color:white\\\">{{post.title}}</span>\\n    </div>\\n  -->\\n    <app-posts class=\\\"main_posts_module\\\" [postList]=\\\"postList\\\"></app-posts>\\n    <app-following class=\\\"main_following_module\\\" (PostListEvent)=\\\"postListEvent($event)\\\"></app-following>\\n  </div> \\n</div>\\n\"","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { MainService } from './main.service';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\n  search:string = \"\";\n  searchOn:boolean = true;\n  searchOff:boolean = false;\n  constructor(private _mainService: MainService) { }\n\n  ngOnInit() {\n  }\n\n  // Using postList to connect with following.component and posts.component\n  postList = [];\n  public userPost = [];\n\n  /**\n   * onSearchClick()\n   * When user click search button\n   * Based on search bar content\n   * Show specific content on the post view\n   */\n  onSearchClick() {    \n\n    // Get the postList\n    let userPost = JSON.parse(localStorage.getItem(\"userPosts\"));\n    this.postList = this._mainService.searchKeyWord(this.search, userPost);\n    this.searchOn = false;\n    this.searchOff = true;\n    /*\n    if(this.search == \"\"){\n      return // do nothing\n    }\n    else {\n      // Set the postList to null\n      this.postList = [];\n      console.log(this.search);\n      // Get the postList\n      let userPost = JSON.parse(localStorage.getItem(\"userPosts\"));\n      console.log(userPost);\n      // Check for the author\n      for(let i = 0; i < userPost.length; i++){\n        if(userPost[i].author.toLowerCase().includes(this.search.toLowerCase()) \n        || userPost[i].article.toLowerCase().includes(this.search.toLowerCase())){\n          this.postList.push(userPost[i]);\n        }\n      }\n    }\n    */\n  }\n\n  /**\n   * @onClearSearch\n   * When user click clear button on search bar\n   * Clear search bar content\n   * And show all posts on the post view\n   */\n  onClearSearch() {\n    this.searchOn = true;\n    this.searchOff = false;\n    this.search = \"\";\n    this.postList = JSON.parse(localStorage.getItem(\"userPosts\"));\n  }\n\n  postListEvent($event) {\n    this.postList = $event;\n  }\n\n  Logout() {  \n    this._mainService.logOutUser();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IPosts } from '../posts';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MainService {\n\n  constructor() { }\n\n  logOutUser(){\n    localStorage.setItem(\"currentUser\", \"\");\n  }\n\n  searchKeyWord(searchKey: string, userPost: IPosts[]){\n    let postList = [];\n    if(searchKey == \"\"){\n      return userPost;\n    }\n    else {\n      // Set the postList to null\n      console.log(searchKey);\n      // Check for the author\n      for(let i = 0; i < userPost.length; i++){\n        if(userPost[i].author.toLowerCase().includes(searchKey.toLowerCase()) \n        || userPost[i].article.toLowerCase().includes(searchKey.toLowerCase())){\n          postList.push(userPost[i]);\n        }\n      }\n    }\n    return postList;\n  }\n}\n","module.exports = \".main_posts_post {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    overflow: hidden;\\r\\n}\\r\\n\\r\\n.posts_post_title_time {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    border-bottom: 2px solid #D5D5D5;\\r\\n    text-align: center;\\r\\n}\\r\\n\\r\\n.posts_post_title_time span {\\r\\n    margin-left: 5%;\\r\\n    font-size: 130%;\\r\\n}\\r\\n\\r\\n.posts_post_img_article {\\r\\n    width: 90%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n/*Field for post img*/\\r\\n\\r\\n.posts_post_img {\\r\\n    width: 40%;\\r\\n    height: auto;\\r\\n    float: left;\\r\\n}\\r\\n\\r\\n.posts_post_img img {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    margin-top: 10%;\\r\\n    margin-bottom: 10%;\\r\\n}\\r\\n\\r\\n/*Field for post article*/\\r\\n\\r\\n.posts_post_article {\\r\\n    width: 55%;\\r\\n    height: auto;\\r\\n    float: right;\\r\\n    margin-top: 3%;\\r\\n    margin-bottom: 3%;\\r\\n    font-family: sans-serif;\\r\\n}\\r\\n\\r\\n.posts_post_article span {\\r\\n    font-size: 1.5em;\\r\\n}\\r\\n\\r\\n.posts_post_module {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    background-color: #F7F7F7;\\r\\n    margin-bottom: 1%;\\r\\n}\\r\\n\\r\\n.posts_post {\\r\\n    width: 100%;\\r\\n    height: 5%;\\r\\n}\\r\\n\\r\\n.posts_btns {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    overflow: hidden;\\r\\n    background-color: #D5D5D5;\\r\\n}\\r\\n\\r\\n.posts_btns button {\\r\\n    float: right;\\r\\n    margin-right: 3%;\\r\\n    margin-top: 0.5%;\\r\\n    margin-bottom: 0.5%;\\r\\n}\\r\\n\\r\\n.postComment {\\r\\n    width: 100%;\\r\\n    font-size: 130%;\\r\\n    padding-top: 2%;\\r\\n    padding-bottom: 1%;\\r\\n}\\r\\n\\r\\n.postComment span {\\r\\n    margin-top: 5%;\\r\\n    margin-bottom: 5%;\\r\\n    padding-left: 2%;\\r\\n}\\r\\n\\r\\n.postComment #comment_comment {\\r\\n    width: auto;\\r\\n    margin-left: 1%;\\r\\n    padding-left: 2%;\\r\\n    padding-right: 2%;\\r\\n    border-radius: 7px;\\r\\n    background-color: #D5D5D5;\\r\\n}\\r\\n\\r\\n.postComment #comment_username {\\r\\n    font-weight: bold;\\r\\n}\"","module.exports = \"<div class=\\\"main_posts_post\\\">\\n\\n  <!--Iterate the data from posts.json-->\\n  <div class=\\\"posts_post_module\\\" *ngFor=\\\"let post of postList\\\">\\n\\n      <div class=\\\"posts_post\\\">\\n\\n        <div class=\\\"posts_post_title_time\\\">\\n          <h3>{{post.title}}</h3>\\n          <span>{{post.author}}</span>\\n          <span>{{post.time}}</span>\\n        </div>\\n\\n        <div class=\\\"posts_post_img_article\\\">\\n\\n          <div class=\\\"posts_post_img\\\">\\n            <img src={{post.img}}>\\n          </div>\\n          <div class=\\\"posts_post_article\\\">\\n            <span>{{post.article}}</span>\\n          </div>\\n          \\n        </div>\\n        \\n      </div>\\n\\n      <div class=\\\"posts_btns\\\">\\n        <button class=\\\"btn btn-primary\\\">Edit</button>\\n        <button class=\\\"btn btn-primary\\\" (click)=\\\"clickComment()\\\">Comment</button>\\n      </div>\\n      \\n      <div *ngIf=\\\"showComment\\\">\\n      <div *ngFor=\\\"let comment of post.comments\\\" class=\\\"postComment\\\" >\\n        <span id=\\\"comment_username\\\">{{comment.username}}:</span>\\n        <span id=\\\"comment_comment\\\">{{comment.comment}}</span>\\n      </div>\\n      </div>\\n  </div>\\n\\n  \\n</div>\\n\\n\\n\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { PostsService } from '../posts/posts.service';\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.css'],\n})\nexport class PostsComponent implements OnInit {\n  @Input() public postList = [];\n  public showComment = false;\n  public userPosts = [];\n  posts: string[];\n  constructor(private _postService: PostsService) { }\n  \n  ngOnInit() {\n    //this.getPostsList();\n    //this._postService.getPost().subscribe(data => this.posts = data);\n    /*\n    this._postService.getPost().subscribe(data => {\n      this.posts = data;\n      console.log(this.posts[0]);\n      console.log(data);\n    });\n    */\n    this._postService.getPost().subscribe(response => {this.posts = response[\"posts\"]});\n    console.log(this.posts);\n    // When init the page, load the user posts from localStorage\n    this.postList = JSON.parse(localStorage.getItem(\"userPosts\"));\n  }\n\n  clickComment(){\n    if(this.showComment == true){\n      this.showComment = false;\n    }\n    else{\n      this.showComment = true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IPosts } from '../../posts';\n\n@Injectable({\n  providedIn: 'root'\n})\n/*Regist this service in app.module*/\nexport class PostsService {\n  private _url: string = \"../../assets/mock-data/posts.json\";\n\n  constructor(private http: HttpClient) { }\n  const \n  /*\n  getPost(): Observable<IPosts[]>{\n    return this.http.get<IPosts[]>(this._url);\n\n  }\n  */\n\n  getPost(){\n    return this.http.get(this._url);\n  }\n}\n","module.exports = \".profile_main_frame {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n.profile_user_info {\\r\\n    width: 80%;\\r\\n    height: 95%;\\r\\n    margin: auto;\\r\\n    background-color: #F7F7F7;\\r\\n}\\r\\n\\r\\n.profile_user_info div {\\r\\n    font-family: monospace;\\r\\n}\\r\\n\\r\\n.profile_img {\\r\\n    width: 15%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n    padding-top: 4%;\\r\\n}\\r\\n\\r\\n.profile_img img {\\r\\n    width: 100%;\\r\\n    height: auto;\\r\\n    border-radius: 50%;\\r\\n    border: 4px solid #BABABA;\\r\\n}\\r\\n\\r\\n.profile_update_form {\\r\\n    width: 50%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n.form-group {\\r\\n    width: 50%;\\r\\n    height: auto;\\r\\n    margin: auto;\\r\\n    margin-top: 1em;\\r\\n    font-size: 1.3em;\\r\\n}\\r\\n\\r\\n.update_btn {\\r\\n    width: 20%;\\r\\n    margin: auto;\\r\\n    margin-top: 3%;\\r\\n    margin-bottom: 10%;\\r\\n}\\r\\n\\r\\n.update_btn button {\\r\\n    width: 100%;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n.user_profile span:hover {\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n.user_logout span:hover {\\r\\n    cursor: pointer;\\r\\n}\"","module.exports = \"\\n  <!--Navigation Bar-->\\n  <div class=\\\"app_headline\\\">\\n      <div class=\\\"app_navi\\\">\\n        <div class=\\\"web_name\\\">\\n          <span>RiceBook</span>\\n        </div>\\n  \\n        <div class=\\\"web_logo\\\">\\n          <img src=\\\"./assets/img/logo.png\\\">\\n        </div>\\n  \\n        <div class=\\\"search_bar\\\">\\n          <textarea placeholder=\\\"Harlan0103\\\"></textarea>\\n        </div>\\n  \\n        <div class=\\\"search_btn\\\">\\n          <button class=\\\"btn btn-default\\\">Search</button>\\n        </div>\\n  \\n      <div class=\\\"user_profile\\\" routerLink=\\\"/main\\\">\\n        <span>Main</span>\\n      </div>\\n  \\n      <div class=\\\"user_logout\\\" routerLink=\\\"/\\\">\\n        <span>Logout</span>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div class=\\\"profile_main_frame\\\">\\n  <div class=\\\"profile_user_info\\\">\\n\\n    <div class=\\\"profile_img\\\">\\n      <img src={{profile.img}}>\\n      <input type=\\\"file\\\" *ngIf=\\\"editable\\\">\\n    </div>\\n\\n    <form class=\\\"profile_update_form\\\" #updateForm=\\\"ngForm\\\">\\n      <div class=\\\"form-group\\\">\\n        <label>Username</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"account\\\" name=\\\"account\\\" disabled placeholder=\\\"{{profile.username}}\\\">\\n          <div></div>\\n        </div>\\n      \\n        <div class=\\\"form-group\\\">\\n          <label>Dispaly name</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"display\\\" name=\\\"display\\\" value=\\\"{{profile.displayname}}\\\" [(ngModel)]=\\\"profile.displayname\\\" *ngIf=\\\"editable\\\">\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"display\\\" name=\\\"display\\\" value=\\\"{{profile.displayname}}\\\" disabled *ngIf=\\\"diseditable\\\">\\n          <div></div>\\n        </div>\\n      \\n        <!--Email Address Editable-->\\n        <div class=\\\"form-group\\\" *ngIf=\\\"editable\\\">\\n            <label>Email</label>\\n            <input type=\\\"text\\\" #email=\\\"ngModel\\\"\\n                class=\\\"form-control\\\" [class.is-invalid]=\\\"email.invalid && email.touched\\\"\\n                id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"username@ricebook.com\\\" pattern=\\\"[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,3}$\\\" required \\n                [(ngModel)]=\\\"profile.email\\\">\\n            <!--Error message--> \\n            <div *ngIf=\\\"email.errors && (email.invalid || email.touched)\\\" [class.d-none]=\\\"email.vliad || email.untouched\\\">\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"email.errors.required\\\">Email address is required</small>\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"email.errors.pattern\\\">Please enter a valid email address</small>\\n            </div>\\n        </div>\\n\\n        <!--Email Address Diseditable-->\\n        <div class=\\\"form-group\\\" *ngIf=\\\"diseditable\\\">\\n          <label>Email</label>\\n          <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" required value=\\\"{{profile.email}}\\\" disabled>\\n        </div>\\n      \\n        <!--Date of Birth-->\\n        <div class=\\\"form-group\\\">\\n          <label>Date of Birth</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"dob\\\" name=\\\"dob\\\" disabled placeholder=\\\"{{profile.dob}}\\\">\\n        </div>\\n      \\n        <!--Zipcode Diseditable-->\\n        <div class=\\\"form-group\\\" *ngIf=\\\"diseditable\\\">\\n          <label>Zipcode</label>\\n          <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"zipcode\\\" name=\\\"zipcode\\\" required value=\\\"{{profile.zipcode}}\\\" disabled >\\n        </div>\\n\\n        <!--ZIPCODE-->\\n        <div class=\\\"form-group\\\" *ngIf=\\\"editable\\\">\\n            <label>Zipcode</label>\\n            <input type=\\\"text\\\" #zipcode=\\\"ngModel\\\"\\n                class=\\\"form-control\\\" [class.is-invalid]=\\\"zipcode.invalid && zipcode.touched\\\"\\n                id=\\\"zipcode\\\" name=\\\"zipcode\\\" placeholder=\\\"77030\\\" pattern=\\\"\\\\d{5}\\\" required \\n                [(ngModel)]=\\\"profile.zipcode\\\">\\n              <!--The pattenr of zipcode should be 5 digit numbers-->\\n            <!--Error message for invalid and mispattern-->\\n            <div *ngIf=\\\"zipcode.errors && (zipcode.invalid || zipcode.touched)\\\" [class.d-none]=\\\"zipcode.valid || zipcode.untouched\\\">\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"zipcode.errors.required\\\">Zipcode is required</small>\\n                <small class=\\\"text-danger\\\" *ngIf=\\\"zipcode.errors.pattern\\\">Zipcode must be 5 digit numbers</small>\\n            </div>\\n        </div>\\n\\n        <!--Update button-->\\n        <div class=\\\"update_btn\\\">\\n            <button class=\\\"btn btn-primary\\\" (click)=\\\"updateOnClick()\\\" *ngIf=\\\"editable\\\" [disabled]=\\\"updateForm.form.invalid\\\">Update</button>\\n            <button class=\\\"btn btn-primary\\\" (click)=\\\"editOnClick()\\\" *ngIf=\\\"diseditable\\\">Edit</button>\\n        </div>\\n\\n    </form>\\n\\n  </div>\\n  \\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { userProfile } from '../user_profile';\nimport { ProfileService } from './profile.service';\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\nimport { LoginService } from '../auth/login/login.service';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n  // a string to store user profile\n  public currentUser = [];\n  storageUser: string;\n  editable: boolean = false;\n  diseditable: boolean = true;\n\n  profile: userProfile = {\n    img: \"\",\n    username: \"\",\n    displayname: \"\",\n    email: \"\",\n    dob: \"\",\n    zipcode: \"\"\n  };\n\n  /*When click update, update data and show edit button*/\n  updateOnClick(){\n    this.editable = false;\n    this.diseditable = true;\n  }\n\n  /*When click edit, show edit page with update button*/\n  editOnClick(){\n    this.editable = true;\n    this.diseditable = false;\n  }\n\n  constructor(private _profileService: LoginService, private pService: ProfileService) { }\n\n  ngOnInit() {\n    this._profileService.getUser().subscribe(data => {\n      this.currentUser = data;\n      console.log(this.currentUser);\n      this.storageUser = localStorage.getItem(\"currentUser\");\n      console.log(this.storageUser);\n      this.getUserInfo();\n      // Call method in service to fetch user profile into profile object\n      this.profile = this.pService.fetchLoggedInUser(this.storageUser, this.currentUser);\n      console.log(this.profile);\n\n      /*\n      for(let i = 0; i < this.currentUser.length; i++){\n        if(this.currentUser[i].netID == this.storageUser){\n          //this.profile.img = this.currentUser[i].img;\n          this.profile.dob = this.currentUser[i].dob;\n          this.profile.img = this.currentUser[i].img;\n          this.profile.username = this.currentUser[i].username;\n          this.profile.zipcode = this.currentUser[i].zipcode;\n          this.profile.displayname = this.currentUser[i].displayname;\n          this.profile.email = this.currentUser[i].email;\n        }\n      }\n      */\n    });\n  }\n\n  getUserInfo(){\n    console.log(\"fetching user data from service\");\n    \n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IProfile } from '../profile';\nimport { userProfile } from '../user_profile';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProfileService {\n  // Create url\n  private _url:string = \"../../assets/mock-data/profile.json\";\n  constructor(private http: HttpClient) { }\n  // Function to get user information\n  getUser():Observable<IProfile[]>{\n    return this.http.get<IProfile[]>(this._url);\n  }\n\n  fetchLoggedInUser(username, userProfile: IProfile[]) {\n    //console.log(userProfile);\n    //console.log(username);\n    let profile: userProfile = {\n      username: \"\",\n      displayname: \"\",\n      email: \"\",\n      zipcode: \"\",\n      dob: \"\",\n      img: \"\"\n    };\n\n    //let profile: IProfile;\n    for(let i = 0; i < userProfile.length; i++){\n      if(username == userProfile[i].username){\n        profile.username = userProfile[i].username;\n        profile.displayname = userProfile[i].displayname;\n        profile.email = userProfile[i].email;\n        profile.dob = userProfile[i].dob;\n        profile.zipcode = userProfile[i].zipcode;\n        profile.img = userProfile[i].img;\n      }\n    }\n    //console.log(profile);\n    return profile;\n  }\n}\n","/*\r\nCreate a class UserLogin initilize login component\r\n*/\r\nexport class UserLogin {\r\n    public username: string\r\n    public pwd: string\r\n}","/*\r\n@user_password_confirm.directive.ts\r\nCustom password validation\r\nThe userPasswordConfirm class is implements the Angular Validator interface\r\nSo we need to import the Validator form \"@angualr/forms\"\r\nIn the Angular, When we create a directive\r\nWe need to decorate the directive\r\nWe create selector as attribute apply to the field we want to use\r\n*/\r\nimport { Validator, NG_VALIDATORS, AbstractControl } from \"@angular/forms\";\r\nimport { Directive, Input } from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: '[pwdValidator]',\r\n    providers: [{\r\n        provide: NG_VALIDATORS,\r\n        useExisting: userPasswordConfirm,\r\n        multi: true\r\n    }]\r\n})\r\n\r\nexport class userPasswordConfirm implements Validator{\r\n    // Use the input field to pass the value that we want to compare\r\n    @Input() pwdValidator: string;\r\n    validate(control: AbstractControl): {[key:string]: any} | null{\r\n        // To find the parent element form then get the the password element\r\n        const controlToCompare = control.parent.get(this.pwdValidator); \r\n        if(controlToCompare && controlToCompare.value !== control.value){\r\n            // The return type is {[key:string]: any | null}\r\n            // Return the key to the template component to get the error type\r\n            return { 'notEqual':true };\r\n        }\r\n        // Then add this module into root module\r\n        return null;\r\n    }\r\n}","/*\r\nCreate a class contains new registrated user information\r\n*/\r\nexport class UserInfo {\r\n\r\n\tpublic name: string\r\n\tpublic display: string\r\n\tpublic email: string\r\n\tpublic phone: string\r\n\tpublic birth: Date\r\n\tpublic zipcode: number\r\n\tpublic pwd: string\r\n\tpublic repwd: string\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}